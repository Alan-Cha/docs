[{"uri":"https://iter8.tools/docs/archive/v1.0.0/","title":"Homepage","tags":[],"description":"","content":"Deliver better software in the cloud Use iter8\u0026rsquo;s analytics-driven continuous experimentation for reliable and frequent releases of high-quality microservices on Kubernetes.\n Automate canary releases Use advanced statistical algorithms to assess key metrics for your service and progressively shift traffic to the winning release.\n Launch experiments rapidly With iter8\u0026rsquo;s Kiali UI, you can create and launch canary release experiments for your service in seconds, and observe and control these experiments in real-time.\n Analyze long-term trends Analyze how key metrics for your service have evolved over multiple releases using iter8-trend and Grafana.\n Explore iter8\n"},{"uri":"https://iter8.tools/docs/archive/v1.0.0/getting-started/installation/","title":"Installation","tags":[],"description":"","content":"Installation  Iter8 on Kubernetes and Istio  Learn how to install iter8 on Kubernetes and Istio\n   Iter8 on Red Hat OpenShift  Learn how to install iter8 on Red Hat OpenShift\n   "},{"uri":"https://iter8.tools/docs/archive/v1.0.0/about/","title":"Iter8 enables statistically robust continuous experimentation of microservices in your CI/CD pipelines","tags":[],"description":"","content":"Use an iter8 experiment to safely expose competing versions of a service to application traffic, gather in-depth insights about key performance and business metrics for your microservice versions, and intelligently rollout the best version of your service.\nIter8\u0026rsquo;s expressive model of cloud experimentation supports a variety of CI/CD scenarios. Using an iter8 experiment, you can:\n Run a performance test with a single version of a microservice. Perform a canary release with two versions, a baseline and a candidate. Iter8 will shift application traffic safely and gradually to the candidate, if it meets the criteria you specify in the experiment. Perform an A/B test with two versions \u0026ndash; a baseline and a candidate. Iter8 will identify and shift application traffic safely and gradually to the winner, where the winning version is defined by the criteria you specify in the experiment. Perform an A/B/N test with multiple versions \u0026ndash; a baseline and multiple candidates. Iter8 will identify and shift application traffic safely and gradually to the winner.  Under the hood, iter8 uses advanced Bayesian learning techniques coupled with multi-armed bandit approaches to compute a variety of statistical assessments for your microservice versions, and uses them to make robust traffic control and rollout decisions.\n"},{"uri":"https://iter8.tools/docs/archive/v1.0.0/getting-started/installation/kubernetes/","title":"Iter8 on Kubernetes and Istio","tags":[],"description":"","content":"These instructions show you how to set up iter8 on Kubernetes with Istio.\nPrerequisites  Kubernetes v1.11 or newer. Istio v1.1.5 and newer. Your Istio installation must have at least the istio-pilot as well as telemetry and Prometheus enabled.  Install iter8 on Kubernetes iter8 has two components, iter8_analytics and iter8_controller. To install them, follow the instructions below. For additional considerations when installing iter8 on Red Hat OpenShift, check out these instructions.\nQuick installation To install iter8 with the default settings, you can run the following install script:\ncurl -L -s https://raw.githubusercontent.com/iter8-tools/iter8-controller/v0.2.1/install/install.sh \\ | /bin/bash - Customized installation via Helm charts In case you need to customize the installation of iter8, use the Helm charts listed below:\n  iter8-analytics: https://github.com/iter8-tools/iter8-analytics/releases/download/v0.2.1/iter8-analytics-helm-chart.tar\n  iter8-controller: https://github.com/iter8-tools/iter8-controller/releases/download/v0.2.1/iter8-controller-helm-chart.tar\n  Note on Prometheus: In order to make assessments, iter8-analytics needs to query metrics collected by Istio and stored on Prometheus. The default values for the helm chart parameters (used in the quick installation) point iter8-analytics to the Prometheus server at http://prometheus.istio-system:9090 (the default internal Kubernetes URL of Prometheus installed as an Istio addon) without specifying any need for authentication. If your Istio installation is shipping metrics to a different Prometheus service, or if you need to configure authentication to access Prometheus, you need to set appropriate iter8-analytics Helm chart parameters. Look in the section metricsBackend of the Helm chart\u0026rsquo;s values.yaml file for details.\nNote on Istio Telemetry: When deploying iter8-controller using helm, make sure to set the parameter istioTelemetry to conform with your environment. Possible values are v1 or v2. Use v1 if the Istio mixer is not disabled. You can determine whether or not the mixer is disabled using this command:\nkubectl -n $ISTIO_NAMESPACE get cm istio -o json | jq .data.mesh | grep -o \u0026#39;disableMixerHttpReports: [A-Za-z]\\+\u0026#39; | cut -d \u0026#39; \u0026#39; -f2 Verify the installation After installing iter8-analytics and iter8-controller, you should see the following pods and services in the newly created iter8 namespace:\n$ kubectl get pods -n iter8 NAME READY STATUS RESTARTS AGE iter8-controller-5f54bb4b88-drr8s 1/1 Running 0 4s iter8-analytics-5c5758ccf9-p575b 1/1 Running 0 61s $ kubectl get svc -n iter8 NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE iter8-controller ClusterIP 172.21.62.217 \u0026lt;none\u0026gt; 443/TCP 20s iter8-analytics ClusterIP 172.21.106.44 \u0026lt;none\u0026gt; 80/TCP 76s Import iter8\u0026rsquo;s Grafana dashboard To enable users to see Prometheus metrics that pertain to their canary releases or A/B tests, iter8 provides a Grafana dashboard template. To take advantage of Grafana, you will need to import this template. To do so, first make sure you can access Grafana. In a typical Istio installation, you can port-forward Grafana from Kubernetes to your localhost\u0026rsquo;s port 3000 with the command below:\nkubectl -n istio-system port-forward $(kubectl -n istio-system get pod -l app=grafana -o jsonpath=\u0026#39;{.items[0].metadata.name}\u0026#39;) 3000:3000 After running that command, you can access Grafana\u0026rsquo;s UI at http://localhost:3000.Iter8 dashboard can be imported by:\ncurl -L -s https://raw.githubusercontent.com/iter8-tools/iter8-controller/v0.2.1/hack/grafana_install_dashboard.sh \\ | /bin/bash - Uninstall iter8 If you want to uninstall all iter8 components from your Kubernetes cluster, first delete all instances of Experiment from all namespaces. Then, you can delete iter8 by running the following command:\nkubectl delete -f https://raw.githubusercontent.com/iter8-tools/iter8-controller/v0.2.1/install/iter8-controller.yaml Note that this command will delete the Experiment CRD and wipe out the iter8 namespace, but it will not remove the iter8 Grafana dashboard if created.\n"},{"uri":"https://iter8.tools/docs/archive/v1.0.0/reference/metrics/","title":"Iter8&#39;s metrics","tags":[],"description":"","content":"Coming soon!\n"},{"uri":"https://iter8.tools/docs/archive/v1.0.0/getting-started/","title":"Getting started","tags":[],"description":"","content":"Tutorials  Installation  Installation Iter8 on Kubernetes and Istio Learn how to install iter8 on Kubernetes and Istio Iter8 on Red Hat OpenShift Learn how to install iter8 on Red Hat OpenShift   Iter8 on Kubernetes and Istio  Learn how to install iter8 on Kubernetes and Istio\n   Iter8 on Red Hat OpenShift  Learn how to install iter8 on Red Hat OpenShift\n    Getting started with canary testing  Learn how to perform a canary release\n   "},{"uri":"https://iter8.tools/docs/archive/v1.0.0/getting-started/canary/","title":"Getting started with canary testing","tags":[],"description":"","content":"This tutorial shows how iter8 can be used to perform a canary release by gradually shifting traffic from one version of a microservice to another while evaluating the behavior of the new version. Traffic is fully shifted only if the behavior the candidate version meets specified acceptance criteria.\nThis tutorial has seven steps, which are meant to be tried in order. You will learn:\n how to perform a canary rollout with iter8; and how to define different success criteria for iter8 to analyze canary releases and determine success or failure;  The tutorial is based on the Bookinfo sample application distributed with Istio. This application comprises 4 microservies: productpage, details, reviews, and ratings. Of these, productpage is a user-facing service while the others are backend services.\nThis tutorial assumes you have already installed iter8 (including Istio). If not, do so using the instructions here.\nDeploy the Bookinfo application To deploy the Bookinfo application, create a namespace configured to enable auto-injection of the Istio sidecar. You can use whatever namespace name you wish. By default, the namespace bookinfo-iter8 is created.\nexport NAMESPACE=bookinfo-iter8 curl -s https://raw.githubusercontent.com/iter8-tools/docs/master/static/tutorials/namespace.yaml \\  | sed \u0026#34;s#bookinfo-iter8#$NAMESPACE#\u0026#34; \\  | kubectl apply -f - Next, deploy the application:\nkubectl --namespace $NAMESPACE apply -f https://raw.githubusercontent.com/iter8-tools/docs/master/static/tutorials/bookinfo-tutorial.yaml You should see pods for each of the four microservices:\nkubectl --namespace $NAMESPACE get pods Note that we deployed version v2 of the reviews microsevice; that is, reviews-v2. Each pod should have two containers, since the Istio sidecar was injected into each.\nExpose the Bookinfo application Expose the Bookinfo application by defining an Istio Gateway and VirtualService:\nkubectl --namespace $NAMESPACE apply -f https://raw.githubusercontent.com/iter8-tools/docs/master/static/tutorials/bookinfo-gateway.yaml You can inspect the created resources:\nkubectl --namespace $NAMESPACE get gateway,virtualservice Note that the service has been associated with a fake host, bookinfo.example.com for demonstration purposes.\nVerify access to Bookinfo To access the application, determine the ingress IP and port for the application. You can do so by following steps 3 and 4 of the Istio instructions here to set the environment variables GATEWAY_URL. You can then check if you can access the application with the following curl command:\ncurl --header \u0026#39;Host: bookinfo.example.com\u0026#39; -o /dev/null -s -w \u0026#34;%{http_code}\\n\u0026#34; \u0026#34;http://${GATEWAY_URL}/productpage\u0026#34; If everything is working, the command above should return 200. Note that the curl command above sets the Host header to match the host we associated the VirtualService with (bookinfo.example.com).\nNote: If you want to access the application from your browser, you will need to set this header using a browser plugin.\nGenerate load To simulate user requests, use a command such as the following:\nwatch -n 0.1 \u0026#39;curl --header \u0026#34;Host: bookinfo.example.com\u0026#34; -s \u0026#34;http://${GATEWAY_URL}/productpage\u0026#34; | grep -i \u0026#34;color=\\\u0026#34;\u0026#34;\u0026#39; This command requests the productpage microservice 10 times per second. In turn, this causes about the same frequency of requests against the backend microservice. We filter the response to see the color being used to display the \u0026ldquo;star\u0026rdquo; rating of the application. The color varies between versions giving us a visual way to distinguish between them.\nCreate a canary Experiment We will now define a canary experiment to rollout version v3 of the reviews application. These versions are identical except for the color of the stars that appear on the page. In version v3 they are red. This can be seen in the inspected in the output of the above watch command. As version v3 is rolled out, you should see the color change.\nTo describe a canary rollout, create an iter8 Experiment that identifies the original, or baseline version and the new, or candidate version and some evaluation criteria. For example:\napiVersion: iter8.tools/v1alpha2 kind: Experiment metadata: name: reviews-v3-rollout spec: service: name: reviews baseline: reviews-v2 candidates: [ \u0026#34;reviews-v3\u0026#34; ] criteria: - metric: iter8_mean_latency threshold: type: absolute value: 200 duration: maxIterations: 8 interval: 15s trafficControl: maxIncrement: 20 In this example, the target of the experiment is the service reviews. The baseline and candidate versions are specified using their Deployment names, reviews_v2 and reviews_v3, respectively. A single evaluation criteria is specified. It requires that the measurements of the metric iter8_mean_latency should all return values less than 200 milliseconds. The additional parameters control how long the experiment should run and how much traffic can be shifted to the new version in each interval. Details regarding these parameters are here.\nThe experiment can be created using the command:\nkubectl --namespace $NAMESPACE apply -f https://raw.githubusercontent.com/iter8-tools/docs/master/static/tutorials/canary_reviews-v2_to_reviews-v3.yaml Inspection of the new experiment shows that it is paused because the specified candidate version cannot be found in the cluster:\nkubectl --namespace $NAMESPACE get experiment NAME TYPE HOSTS PHASE WINNER FOUND CURRENT BEST STATUS reviews-v3-rollout Canary [reviews] Pause TargetsError: Missing Candidate Once the candidate version is deployed, the experiment will start automatically.\nDeploy the candidate version of the reviews service To deploy version v3 of the reviews microservice, execute:\nkubectl --namespace $NAMESPACE apply -f https://raw.githubusercontent.com/iter8-tools/docs/master/static/tutorials/reviews-v3.yaml Once its corresponding pods have started, the Experiment will show that it is progressing:\nkubectl --namespace $NAMESPACE get experiment NAME TYPE HOSTS PHASE WINNER FOUND CURRENT BEST STATUS reviews-v3-rollout Canary [reviews] Progressing false reviews-v3 IterationUpdate: Iteration 0/8 completed At approximately 15 second intervals, you should see the interation number change. Traffic will gradually be shifted (in 20% increments) from version v2 to version v3. iter8 will quickly identify that the best version is the candidate, reviews-v3 and that it is confident that this choice will be the final choice (by indicating that a winner has been found:\nkubectl --namespace $NAMESPACE get experiment NAME TYPE HOSTS PHASE WINNER FOUND CURRENT BEST STATUS reviews-v3-rollout Canary [reviews] Progressing true reviews-v2 IterationUpdate: Iteration 3/8 completed When the experiment is finished (about 2 minutes), you will see that all traffic has been shifted to the winner, reviews-v3:\nkubectl --namespace $NAMESPACE get experiment NAME TYPE HOSTS PHASE WINNER FOUND CURRENT BEST STATUS reviews-v3-rollout Canary [reviews] Completed true reviews-v3 ExperimentCompleted: Traffic To Winner Cleanup To clean up, delete the namespace:\nkubectl delete namespace $NAMESPACE Other things to try (before cleanup) Inspect progress using Grafana Coming soon\nInspect progress using Kiali Coming soon\nAlter the duration of the experiment The progress of an experiment can be impacted by duration and trafficControl parameters:\n duration.interval defines how long each test interval should be (default: 30 seconds) duration.maxIterations identifies what the maximum number of iterations there should be (default: 100) trafficControl.maxIncrement identifies the largest change (increment) that will be made in the percentage of traffic sent to a candidate (default: 2 percent)  The impact of the first two parameters on the duration of the experiment are clear. Restricting the size of traffic shifts limits how quickly an experiment can come to a decision about a candidate.\nTry a version that fails the criteria Version v4 of the reviews service is a modification that returns after a 5 second delay. If you try this version as a candidate, you should see the canary experiment reject it and choose the baseline version as the winner.\nFor your reference:\n A YAML for the deployment reviews-v4 is: https://raw.githubusercontent.com/iter8-tools/docs/master/static/tutorials/reviews-v4.yaml A YAML for an canary experiment from reviews-v3 to reviews-v4 is: https://raw.githubusercontent.com/iter8-tools/docs/master/static/tutorials/canary_reviews-v3_to_reviews-v4.yaml  Try a version which returns errors Coming soon\nTry with a user-facing service Coming soon\n"},{"uri":"https://iter8.tools/docs/archive/v1.0.0/getting-started/installation/red-hat/","title":"Iter8 on Red Hat OpenShift","tags":[],"description":"","content":"These instructions show you how to set up iter8 on Red Hat OpenShift.\nPrerequisites We recommend using the Red Hat OpenShift Service Mesh. This can be installed using the Red Hat OpenShift Service Mesh Operator. For details, see: https://docs.openshift.com/container-platform/4.3/service_mesh/service_mesh_install/installing-ossm.html.\nInstalling the Service Mesh involves installing the Elasticsearch, Jaeger, Kiali and Red Hat OpenShift Service Mesh Operators, creating and managing a ServiceMeshControlPlane resource to deploy the control plane, and creating a ServiceMeshMemberRoll resource to specify the namespaces associated with the Red Hat OpenShift Service Mesh.\nInstalling iter8 By default, iter8 uses the Prometheus service installed as part of the Red Hat OpenShift Service Mesh for the metrics used to assess the quality of different versions of a service. The Red Hat OpenShift Service Mesh configures the Prometheus service to require authentication. To configure iter8 to authenticate with Prometheus, some additional steps are needed.\nInstall the iter8 analytics service Download and untar the helm chart for the iter8-analytics service. The following options can be used to generate the needed yaml:\nREPO=iter8/iter8-analytics PROMETHEUS_SERVICE=\u0026#39;https://prometheus.istio-system:9090\u0026#39; PROMETHEUS_USERNAME=\u0026#39;internal\u0026#39; PROMETHEUS_PASSWORD=\u0026lt;FILL IN\u0026gt; helm template install/kubernetes/helm/iter8-analytics \\  --name iter8-analytics \\  --set image.repository=${REPO} \\  --set image.tag=v0.2.1 \\  --set iter8Config.authentication.type=basic \\  --set iter8Config.authentication.username=${PROMETHEUS_USERNAME} \\  --set iter8Config.authentication.password=${PROMETHEUS_PASSWORD} \\  --set iter8Config.authentication.insecure_skip_verify=true \\  --set iter8Config.metricsBackendURL=${PROMETHEUS_SERVICE} \\ | kubectl -n iter8 apply -f - The password, to be used can be found in the secret htpasswd in the namespace where Istio is installed. For example, the following might work to identify it:\nPROMETHEUS_PASSWORD=$(kubectl -n istio-system get secret htpasswd -o jsonpath=\u0026#39;{.data.rawPassword}\u0026#39; | base64 --decode) Install the iter8 controller The quick install instructions can be used to install the iter8 controller. The Service Mesh currently uses Istio telemetry version v1:\nkubectl apply -f https://raw.githubusercontent.com/iter8-tools/iter8-controller/v0.2.1/install/iter8-controller.yaml Target Services The Red Hat OpenShift Service Mesh is restricted to the set of namespaces defined in the ServiceMeshMemberRoll resource. In particular, if you will be trying the tutorials, add the namespace bookinfo-iter8 to the ServiceMeshMemberRoll.\nIstio relies a sidecar injected into each pod to provide its capabilities. Istio provides several ways this sidecar can be injected. Red Hat recommends the use of the annotation sidecar.istio.io/inject: \u0026quot;true\u0026quot; in the deployment yaml. Examples can be found in the yaml for the tutorial: https://github.com/iter8-tools/iter8-controller/blob/v0.2.1/doc/tutorials/istio/bookinfo/bookinfo-tutorial.yaml\n"},{"uri":"https://iter8.tools/docs/archive/v1.0.0/reference/experiment/","title":"Iter8&#39;s experiment CRD","tags":[],"description":"","content":"Coming soon!\n"},{"uri":"https://iter8.tools/docs/archive/v1.0.0/reference/algorithms/","title":"Iter8&#39;s algorithms","tags":[],"description":"","content":"Coming soon!\n"},{"uri":"https://iter8.tools/docs/archive/v1.0.0/reference/","title":"Reference","tags":[],"description":"","content":"Reference  Iter8\u0026#39;s metrics  Coming soon!\n   Iter8\u0026#39;s experiment CRD  Coming soon!\n   Iter8\u0026#39;s algorithms  Coming soon!\n   "},{"uri":"https://iter8.tools/docs/archive/v1.0.0/releases/","title":"Older releases","tags":[],"description":"","content":" v1.0.0 v0.2.1 v0.2.0 v0.1.1 v0.1.0 v0.0.1  "},{"uri":"https://iter8.tools/docs/archive/v1.0.0/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://iter8.tools/docs/archive/v1.0.0/tags/","title":"Tags","tags":[],"description":"","content":""}]